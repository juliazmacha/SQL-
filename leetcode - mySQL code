--A country is big if:
--it has an area of at least three million (i.e., 3000000 km2), or
--it has a population of at least twenty-five million (i.e., 25000000).
--Write an SQL query to report the name, population, and area of the big countries.
--Return the result table in any order.

SELECT name, population, area 
FROM World 
WHERE area >= 3000000 OR population >= 25000000;   

--Write an SQL query to find the ids of products that are both low fat and recyclable.
--Return the result table in any order.

SELECT product_id 
FROM Products
WHERE low_fats = "Y" AND recyclable = "Y"; 

--Write an SQL query to report the names of the customer that are not referred by the customer with id = 2.
--Return the result table in any order.
SELECT name 
FROM Customer
WHERE referee_id !=2 OR referee_id IS NULL;  

--Write an SQL query to report all customers who never order anything.
--Return the result table in any order.

SELECT c.name as Customers
FROM Customers c 
LEFT JOIN Orders o 
ON c.id = o.customerid
WHERE o.id IS NULL; 


--Write an SQL query to calculate the bonus of each employee. The bonus of an employee is 100% of their salary if the ID of the employee is an odd number and the employee name does not start with the character 'M'. The bonus of an employee is 0 otherwise.
--Return the result table ordered by employee_id.

SELECT employee_id, IF(employee_id % 2 = 0 OR name LIKE "M%", 0, salary) as bonus 
FROM Employees
ORDER BY employee_id;

--Write an SQL query to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables.
UPDATE Salary SET sex = (CASE sex WHEN "m" THEN "f" ELSE "m" END);

-- Write an SQL query to fix the names so that only the first character is uppercase and the rest are lowercase.
--Return the result table ordered by user_id.
SELECT user_id, CONCAT(UPPER(SUBSTRING(name,1,1)),LOWER(SUBSTRING(name,2))) AS name 
FROM Users
ORDER BY user_id; 

--Write an SQL query to find for each date the number of different products sold and their names.
--The sold products names for each date should be sorted lexicographically.
--Return the result table ordered by sell_date.
SELECT DISTINCT sell_date, COUNT(distinct product) AS num_sold, GROUP_CONCAT(distinct product) AS products 
FROM Activities
GROUP BY sell_date;
